#!/usr/bin/env python3

import json
import os
import select
import socket
import subprocess
import sys
import time


def edit_temp_file(temp_file):
    ''' string -> string
    '''
    subprocess.call(['vim', temp_file])

    with open(temp_file, 'r') as fd:
        output = fd.read()

    try:
        output = json.dumps(json.loads(output))

    except json.decoder.JSONDecodeError:
        print('error: file has JSON formatting errors')
        time.sleep(1)
        edit_temp_file(temp_file)

    else:
        return output


def main():
    ''' list of string -> io
    '''
    edit_mode = False
    remote = ('localhost', 9999)
    args = sys.argv[1:]

    # check for data in stdin
    if select.select([sys.stdin], [], [], 0.0)[0]:
        args += [sys.stdin.read()]

    if args:
        # using a non local server
        if args[0] in ['-h', '--host'] and args[1]:
            remote = (args[1], 9999)
            args = args[2:]

        # check for edit mode before we make the query
        if args and args[-1] in ['-e', '--edit']:
            edit_mode = True
            temp_file = '/tmp/apocrypha-' + '-'.join(args[:-1]) + '.json'

    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        sock.connect(remote)

    except ConnectionRefusedError:
        print('error: could not connect to server')
        sys.exit(1)

    query = '\n'.join(args) + '\n'
    sock.sendall(query.encode('utf-8'))
    sock.shutdown(socket.SHUT_WR)

    result = ''
    while True:
        data = sock.recv(1024)

        if not data:
            sock.close()
            break
        else:
            try:
                result += data.decode('utf-8')

            except UnicodeDecodeError:
                result = 'ERROR'

    # usual case
    if not edit_mode:
        result = result.strip('\n')
        if result:
            print(result)
        return

    # user wants to edit
    #   - write result to temp file
    #   - open with vim
    #   - send temp file back to server
    with open(temp_file, 'w+') as fd:
        fd.write(result)

    output = edit_temp_file(temp_file)

    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.connect(remote)

    query = args[:-1] + ['--set', output]
    query = '\n'.join(query) + '\n'

    sock.sendall(query.encode('utf-8'))
    sock.close()


if __name__ == '__main__':
    main()
