#!/bin/bash

g (){
  # super git wrapper!

  at_work=0
  [[ $(hostname) == 'wkstn-avoecks' ]] && at_work=1

  local cnfrm fmt remote_branch bug_dir bug_branch
  local new_branch_name commits branch diff

  if [[ -z "$1" ]]; then
    g --help
    return
  fi

  cnfrm=1
  fmt="\
%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset"

  while [[ ! -z "$1" ]]; do
    case "$1" in
      "!")  cnfrm=$(( ! cnfrm ))                          ;;

      "a")  confirm "$cnfrm" "git add -A :/"
            git add -A :/                                           ;;

      "bv") confirm "$cnfrm" "git branch -vv"
            git branch -vv                                          ;;

      "rv") confirm "$cnfrm" "git remote -vv"
            git remote -vv                                          ;;

      "c")  confirm "$cnfrm" "git commit"
            git commit                                              ;;

      "ca") confirm "$cnfrm" "git commit --amend"
            git commit --amend                                      ;;

      "co") confirm "$cnfrm" "git checkout $2"
            git checkout "$2"   ; shift                             ;;

      "cb") confirm "$cnfrm" "git checkout -b $2"
            git checkout -b "$2"; shift                             ;;

      "cs") if ! (( at_work )); then
              echo "error: smart checkout not available"
              return
            fi

            bug_dir='/home/avoecks/cribshome/wiki/bugs/'
            bug_branch="BR_BUG_$(find "$bug_dir"   |
                                 grep "$2"         |
                                 grep -o '[0-9]\+' |
                                 head -n 1)"
            confirm "cnfrm" "git checkout $bug_branch"
            git checkout "$bug_branch"; shift                       ;;

      "f")  confirm "$cnfrm" "git fetch"
            git fetch                                               ;;

      "l")  confirm "$cnfrm" "git log"
            git log --color=always | head -n 20                     ;;

      "lo") confirm "$cnfrm" "git log --oneline"
            git log --oneline --color=always | head -n 10           ;;

      "ll") confirm "$cnfrm" "git log --graph"
            git log --graph --pretty=format:"$fmt" --abbrev-commit  ;;

      "s")  confirm "$cnfrm" "git status"
            git status                                              ;;

      "ri") confirm "$cnfrm" "git rebase -i $2"
            if [[ ! -z "$2" ]]; then
              git rebase -i "$2"; shift
            else
              git rebase -i
            fi
        ;;

      "d")  if [[ -f "$2" ]]; then
              confirm "$cnfrm" "git diff --full-index > $2"
              git diff --full-index > "$2"
              shift

            else
              confirm "$cnfrm" "git diff --full-index"
              git diff --full-index
            fi
        ;;

      "dh") if [ "$2" -eq "$2" ] 2>/dev/null ; then
              commits="$2"
            else
              commits="1"
            fi

            if [[ -f "$3" ]]; then
              confirm "$cnfrm" "git diff --full-index HEAD~$commits > $3"
              git diff --full-index HEAD~"$commits" > "$3"
              shift

            else
              confirm "$cnfrm" "git diff --full-index HEAD~$commits"
              git diff --full-index HEAD~"$commits"
            fi
            shift
        ;;

      "ds") if ! (( at_work )); then
              echo "error: smart diff not available"
              return
            fi

            branch="$(git rev-parse --abbrev-ref HEAD)"
            diff="/home/avoecks/cribshome/diffs/${branch}.diff"
            if [ "$2" -eq "$2" ] 2>/dev/null ; then
              confirm "$cnfrm" "git diff --full-index HEAD~$2 > $diff"
              git diff --full-index HEAD~"$2" > "$diff"
              shift

            else
              confirm "$cnfrm" "git diff --full-index HEAD~1 > $diff"
              git diff --full-index HEAD~1 > "$diff"
              shift
            fi
        ;;

      "bn") confirm "$cnfrm" "git checkout $remote_branch -b $new_branch_name"
            remote_branch="$2"
            new_branch_name="$3"
            git checkout "$remote_branch" -b "$new_branch_name"
            shift; shift
        ;;
      "m")  confirm "$cnfrm" "git merge $2"
            if [[ ! -z "$2" ]]; then
              git commit -m "$2"; shift
            fi
        ;;
      "cm") confirm "$cnfrm" "git commit -m $2"
            if [[ ! -z "$2" ]]; then
              git commit -m "$2"; shift
            else
              git commit
            fi
        ;;
      "pl") confirm "$cnfrm" "git pull $2"
            if [[ ! -z "$2" ]]; then
              git pull "$2"; shift
            else
              git pull
            fi
        ;;
      "ph") confirm "$cnfrm" "git push $2"
            if [[ ! -z "$2" ]]; then
              git push "$2"; shift
            else
              git push
            fi
        ;;
      "pf") confirm "$cnfrm" "git push --force $2"
            if [[ ! -z "$2" ]]; then
              git push --force "$2"; shift
            else
              git push --force
            fi
        ;;
      *)
        echo "
  g - super git wrapper
    !  : toggle confirmation
    a  : add everything
    bv : branch -vv
    bn : checkout (remote branch) -b (local branch)
    c  : commit
    ca : commit amend
    cb : checkout -b (branch)
    cs : attempt to checkout branch by bug name [work only]
    cm : commit -m (message)
    co : checkout (file)
    d  : diff changes [output_file]
    dh : diff commits [number of commits] [output_file]
    ds : diff commits [number of commits] - auto names diff [work only]
    f  : fetch
    l  : log
    ll : log graph
    m  : merge (branch)
    s  : status
    rv : remote -vv
    ri : interactive rebase
    p  : pause
    pl : pull [branch]
    ph : push [branch]
    pf : push --force [branch]
        "
        return
        ;;
    esac

    if (( $? )); then
      confirm 0 "Detected failure, not continuing"
      return
    fi

    shift

    [[ -z "$1" ]] || echo
  done
}

# provide functions to callers
g "$@"
