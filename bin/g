#!/bin/bash

g (){
  # super git wrapper!

  local cnfrm fmt remote_branch bug_dir branch
  local new_branch_name commits diff

  [[ -z $1 ]] && { g --help; return; }

  cnfrm=1
  fmt="\
%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset"

  while [[ $1 ]]; do
    case "$1" in
      "!")  cnfrm=$(( ! cnfrm ))                                    ;;

      "a")  confirm! "$cnfrm" "git add -A :/" ;;

      "bv") confirm! "$cnfrm" "git branch -vv" ;;

      "rv") confirm! "$cnfrm" "git remote -vv" ;;

      "c")  confirm! "$cnfrm" "git commit" ;;

      "cc") confirm! "$cnfrm" "git clean -nfd"
            confirm "$cnfrm" "Continue?"
            git clean -fd                                           ;;

      ca) confirm! "$cnfrm" "git commit --amend" ;;
      cA) confirm! "$cnfrm" "git commit --amend --no-edit" ;;

      co) confirm "$cnfrm" "git checkout $2"
          git checkout "$2"   ; shift                             ;;

      cb) confirm "$cnfrm" "git checkout -b $2"
          git checkout -b "$2"; shift                             ;;

      cs) branch=$(git branch -q | grep -i "$2" | xargs | cut -f1 -d' ')
            confirm "cnfrm" "git checkout $branch"
            git checkout "$branch"; shift                           ;;

      f)  confirm! "$cnfrm" "git fetch" ;;

      l)  confirm "$cnfrm" "git log"
           git log --color=always | head -n 20                     ;;

      lo) confirm "$cnfrm" "git log --oneline"
          git log --oneline --color=always | head -n 10           ;;

      ll) confirm "$cnfrm" "git log --graph"
           git log --graph --pretty=format:"$fmt" --abbrev-commit  ;;

      s)  confirm! "$cnfrm" "git status" ;;

      ri) confirm "$cnfrm" "git rebase -i $2"
            if [[ $2 ]]; then
              git rebase -i "$2"; shift
            else
              git rebase -i
            fi
        ;;
      cm) confirm! "$cnfrm" "git commit -m \"$2\""; shift ;;

      m)  confirm! "$cnfrm" "git merge \"${2%.}\""; shift ;;

      pm) confirm! "$cnfrm" "git pull \"${2%.}\""; shift ;;

      pl) confirm! "$cnfrm" "git pull --no-edit \"${2%.}\""; shift ;;

      ph) confirm! "$cnfrm" "git push \"${2%.}\""; shift ;;

      pf) confirm! "$cnfrm" "git push --force \"${2%.}\""; shift ;;

      "d")  if [[ -f $2 ]]; then
              confirm "$cnfrm" "git diff --full-index > $2"
              git diff --full-index > "$2"
              shift

            else
              confirm "$cnfrm" "git diff --full-index"
              git diff --full-index
            fi
        ;;

      "dh") if [ "$2" -eq "$2" ] 2>/dev/null ; then
              commits="$2"
            else
              commits="1"
            fi

            if [[ -f "$3" ]]; then
              confirm "$cnfrm" "git diff --full-index HEAD~$commits > $3"
              git diff --full-index HEAD~"$commits" > "$3"
              shift

            else
              confirm "$cnfrm" "git diff --full-index HEAD~$commits"
              git diff --full-index HEAD~"$commits"
            fi
            shift
        ;;

      "ds") [[ -z "$DIFFDIR" ]] && {
              echo "error: smart diff not available"
              return
            }

            branch="$(git rev-parse --abbrev-ref HEAD)"
            diff="$DIFFDIR/${branch}.diff"

            if [ "$2" -eq "$2" ] 2>/dev/null ; then
              confirm "$cnfrm" "git diff --full-index HEAD~$2 > $diff"
              git diff --full-index HEAD~"$2" > "$diff"
              shift

            else
              confirm "$cnfrm" "git diff --full-index HEAD~1 > $diff"
              git diff --full-index HEAD~1 > "$diff"
              shift
            fi
        ;;

      bn) confirm "$cnfrm" "git checkout $remote_branch -b $new_branch_name"
            remote_branch="$2"
            new_branch_name="$3"
            git checkout "$remote_branch" -b "$new_branch_name"
            shift; shift
        ;;

      *)
        echo "
  g - super git wrapper
    !  : toggle confirmation
    a  : add everything
    bv : branch -vv
    bn : checkout (remote branch) -b (local branch)
    c  : commit
    cc : clean -nfd, confirm, clean -fd
    ca : commit amend
    cb : checkout -b (branch)
    cs : attempt to checkout branch by bug name [work only]
    cm : commit -m (message)
    co : checkout (file)
    d  : diff changes [output_file]
    dh : diff commits [number of commits] [output_file]
    ds : diff commits [number of commits] - auto names diff [work only]
    f  : fetch
    l  : log
    ll : log graph
    m  : merge (branch)
    s  : status
    rv : remote -vv
    ri : interactive rebase
    p  : pause
    pl : pull --no-edit [branch]
    pm : pull [branch]
    ph : push [branch]
    pf : push --force [branch]
        "
        return
        ;;
    esac

    (( $? )) && { confirm 0 "Detected failure, not continuing"; return; }
    shift

    [[ -z "$1" ]] || echo
  done
}

# provide functions to callers
g "$@"
