#!/usr/bin/env python3

import random
import shutil
import subprocess
import os

normal = 10
low = 5
high = 20


def produce_git(options):
    ''' set of tuple -> none

    git related suggestions
    '''

    if not os.path.exists('.git'):
        return
    options.add(
        ('git status', normal))

    git_status = subprocess.check_output(
        ['git', 'status', '--porcelain']).decode('utf-8').split('\n')
    statuses = [_ for _ in git_status if _]

    modified_not_added = False
    add_not_commited = False

    for status in statuses:
        filename = status.split(' ')[-1]

        if status[1] in ['M', '?']:
            # modified but not added
            options.add(
                ('git add {f}'.format(f=filename), normal))
            modified_not_added = True

        elif status[0] in ['M', 'A']:
            # added but not commited
            options.add(
                ('git commit -m "updates to {f}"'.format(f=filename), normal))
            options.add(
                ('git reset HEAD {f}'.format(f=filename), low))
            add_not_commited = True

    if modified_not_added:
        options.add(('git diff', low))

    if add_not_commited:
        options.add(('git diff --cached', low))

    # porcelain doesn't tell us about commits that need to be pushed
    git_status = subprocess.check_output(
        ['git', 'status']).decode('utf-8')

    if 'Your branch is ahead of' in git_status:
        options.add(('git push', normal))


def produce_insync(options):
    ''' none -> none

    insync related suggestions
    '''

    if not shutil.which('insync-headless'):
        return

    insync_status = subprocess.check_output(
        ['insync-headless', 'get_status']).decode('utf-8')

    if insync_status == 'ERROR':
        options.add(('insync-headless retry_errors', normal))

    elif insync_status == 'SHARE':
        options.add(
            ('insync-headless reject_all_new_shares austin.voecks@gmail.com',
             normal))


def produce_human(options):
    ''' none -> none

    suggestions to take a break, drink some water, etc
    '''

    if random.randint(0, 10) == 0:
        options.add(('echo take a break!', low))

    if random.randint(0, 15) == 0:
        options.add(('echo drink some water!', low))


def main():
    '''
    '''
    options = set()

    produce_git(options)
    produce_insync(options)
    produce_human(options)

    for option in options:
        print(option[0])


if __name__ == '__main__':
    main()
