#!/usr/bin/env python3

# pylint: disable=missing-docstring

'''
look at the current context, offer things to do
'''

import random
import shutil
import subprocess
import os

normal = 10
low = 5
high = 20


class Registry():
    items = []

    @classmethod
    def register(cls):
        def decorator(fn):
            cls.items.append(fn)
            return fn
        return decorator


class Options():

    def __init__(self):
        self.options = set()

    def run(self):
        for function in Registry.items:
            function(self)

    def show(self):
        for option in self.options:
            print(option[0])

    def add_low(self, command):
        self.options.add((command, low))

    def add(self, command):
        self.options.add((command, normal))

    def add_high(self, command):
        self.options.add((command, high))

    @Registry.register()
    def produce_git(self):
        ''' git related suggestions '''

        if not os.path.exists('.git'):
            return
        self.add('git status')

        statuses = _shell('git', 'status', '--porcelain', split=True)
        modified_not_added = False
        add_not_commited = False

        for status in statuses:
            filename = status.split(' ')[-1]

            if status[1] in ['M', '?']:
                # modified but not added
                self.add('git add {f}'.format(f=filename))
                self.add('git stash')
                modified_not_added = True

            elif status[0] in ['M', 'A']:
                # added but not commited
                self.add('git commit --amend --no-edit')
                self.add(
                    'git commit -m "updates to {f}"'.format(f=filename))
                self.add(
                    'git reset HEAD {f}'.format(f=filename))
                add_not_commited = True

        if modified_not_added:
            self.add('git diff')

        if add_not_commited:
            self.add('git diff --cached')

        # porcelain doesn't tell us about commits that need to be pushed
        git_status = _shell('git', 'status')

        if 'have diverged' in git_status:
            self.add('git push --force')
        elif 'Your branch is ahead of' in git_status:
            self.add('git push')

        git_stash = _shell('git', 'stash', 'list')
        if git_stash:
            self.add('git stash list')
            self.add('git stash pop')

    @Registry.register()
    def produce_insync(self):
        ''' insync related suggestions '''

        if not shutil.which('insync-headless'):
            return

        insync_status = _shell('insync-headless', 'get_status')

        if insync_status == 'ERROR':
            self.add('insync-headless retry_errors')

        elif insync_status == 'SHARE':
            self.add(
                'insync-headless reject_all_new_shares austin.voecks@gmail.com')

    @Registry.register()
    def produce_human(self):
        ''' suggestions to take a break, drink some water, etc '''

        if random.randint(0, 10) == 0:
            self.add('echo take a break!')

        if random.randint(0, 15) == 0:
            self.add('echo drink some water!')

    @Registry.register()
    def database(self):
        connected = _shell('d', 'assistant', 'alive', '--keys')
        if not connected:
            self.add('python3 -m apocrypha.server')


def _shell(*command, split=False):
    ''' list of str -> list of str
    '''
    try:
        output = subprocess.check_output(
            command,
            stderr=subprocess.STDOUT
        ).decode('utf-8')
    except subprocess.CalledProcessError:
        return False

    if split and output:
        output = [_ for _ in output.split('\n') if _]

    return output


def main():
    '''
    look around for things to offer
    '''
    options = Options()
    options.run()
    options.show()


if __name__ == '__main__':
    main()
