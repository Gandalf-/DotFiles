#!/bin/bash

# usage
#   sh prepare.sh (username)

source "$(dirname "$0")"/reflection.sh

green="\033[01;32m"; normal="\033[00m"
PLATFORM=$(uname)
QUIET=0
#CONFIRM=0

error() {
  printf "%b%s%b " "$green" "$*" "$normal" ; exit 1;
}

chk() {
  printf "%b%s%b\n" "$green" "$*" "$normal"
  if (( QUIET )); then
    eval "$@" >/dev/null || error "error running \"$*\""
  else
    eval "$@" || error "error running \"$*\""
  fi
}

wizard_do_check () {

  if [ "$(whoami)" != 'root' ] || [ "$(uname)" != 'Linux' ]; then
    echo "Must be root on Linux"
    exit
  fi

  if [ -z "$1" ]; then
    echo "Must provide user name"
    exit
  fi
}

wizard_do_update () {
  chk sudo apt-add-repository ppa:fish-shell/release-2
  chk sudo apt update
  chk sudo apt upgrade
  chk sudo apt install tmux fish vim git make gcc libreadline-dev
}

wizard_do_security () {

  chk sudo ufw allow 22/tcp
  chk sudo ufw enable
}

wizard_do_vnc () {
  chk sudo apt install xfce4 xfce4-goodies tightvncserver
  chk sudo vncserver
  chk sudo vncserver -kill :1
  cat > "$HOME"/.vnc/xstartup << EOF
#!/bin/bash
xrdb \$HOME/.Xresources
startxfce4 &
EOF
  chk chmod +x "$HOME"/.vnc/xstartup
}

wizard_add_user () {
  user="$1"

  chk adduser "$user"
  chk usermod -aG sudo "$user"
  chk chsh -s /usr/bin/fish "$user"
  chk mkdir -p /home/"$user"/.ssh/
  chk cp -r /root/.ssh/ /home/"$user"/

  chk chown -R "$user:$user" /home/"$user"/
  return 1
}

wizard_add_configs () {
  chk git clone https://github.com/Gandalf-/DotFiles.git /tmp/DotFiles
  chk ln -sf /tmp/DotFiles/config.fish  /home/"$user"/.config/fish/config.fish
  chk ln -sf /tmp/DotFiles/vimrc        /home/"$user"/.vimrc
  chk ln -sf /tmp/DotFiles/tmux.conf    /home/"$user"/.tmux.conf
  chk ln -sf /tmp/DotFiles/bashrc       /home/"$user"/.bashrc

}

wizard_clean_boot() {

  dpkg --list |
    grep linux-image |
    awk '{ print $2 }' |
    sort -V |
    sed -n '/'"$(uname -r)"'/q;p' |
    xargs sudo apt-get -y purge
}

wizard_make_session() {
  # maybe string -> int
  #
  # create a new tmux session and move to it

  name=${1:-$RANDOM}
  tmux new -d -s "$name"
  tmux switch-client -t "$name"
  return 1
}

wizard_make_file_shell() {
  : "${1? You must provide a name!}"

  cat > "$1".sh << EOF
#!/bin/bash

main() {

  exit 0
}

main "\$@"
EOF
}


wizard_make_file_python() {
  : "${1? You must provide a name!}"

  cat > "$1.py" << EOF
#!/usr/bin/python

import sys

def main(args):
  ''' list of strings -> none
  '''
  pass

if __name__ == '__main__':
  main(sys.argv)
EOF
}

wizard_make_file_c() {
  : "${1? You must provide a name!}"

  cat > "$1".c << EOF
#include "$name.h"

int main(int argc, char *argv[]) {

  return 0;
}
EOF
}

wizard_make_file_cpp() {
  : "${1? You must provide a name!}"

  cat > "$1".cpp << EOF
#include "$name.h"

int main(int argc, char const *argv[]) {

  return 0;
}
EOF
}

wizard_make_file_java() {
  : "${1? You must provide a name!}"
  cat > "$1".java << EOF
public class $1 {

  public static void main(String[] argv) {

    System.out.println("Hello world");
  }
}
EOF
}

wizard_make_project_python() {
  : "${1? You must provide a name!}"
  chk mkdir "$1"
  chk cd "$1"
  wizard_make_file python "$1"
  return 1
}

wizard_make_project_c() {
  : "${1? You must provide a name!}"
  chk mkdir "$1"
  chk cd "$1"
  wizard_make_file c "$1"
  touch "$1".h
  mmake -l c -o "$1"
}

wizard_make_project_cpp() {
  : "${1? You must provide a name!}"
  chk mkdir "$1"
  chk cd "$1"
  wizard_make_file cpp "$1"
  touch "$1".h
  mmake -l cpp -o "$1"
}

wizard_make_project_java() {
  : "${1? You must provide a name!}"
  chk mkdir "$1"
  chk cd "$1"
  wizard_make_file java "$1"
  mmake -l java -o "$1"
}

wizard_update() {
  # update this, whatever that means

  case $PLATFORM in
    Linux)
      chk sudo apt update
      chk sudo apt upgrade -y
      chk sudo apt-get autoremove
      ;;
    ""|*)
      error "don't know how to update on $PLATFORM"
      ;;
  esac
}

wizard_build_lua() {
  # compile and install lua 5.3.3

  echo "installing lua"
  chk cd /tmp/

  chk wget 'https://www.lua.org/ftp/lua-5.3.3.tar.gz'
  chk tar zxvf lua-5.3.3.tar.gz
  chk cd lua-5.3.3
  chk make linux
  chk sudo make install

  chk cd -
  echo "done"
}

wizard_build_vim () {
  # compile and install the lastest vim

  echo "installing vim"
  wizard_build_lua

	chk sudo apt-get build-dep vim-gnome
	chk sudo apt-get install \
    libncurses5-dev libgnome2-dev libgnomeui-dev \
		libgtk2.0-dev libatk1.0-dev libbonoboui2-dev \
		libcairo2-dev libx11-dev libxpm-dev libxt-dev

  chk cd /tmp/
  chk wget 'https://github.com/vim/vim/archive/master.zip'
  chk unzip master.zip
  chk cd vim-master

	chk ./configure \
    --with-features=huge \
    --with-lua-prefix=/usr/local \
    --enable-multibyte \
    --enable-rubyinterp=yes \
    --enable-pythoninterp=yes \
    --with-python-config-dir=/usr/lib/python2.7/config \
    --enable-python3interp=yes \
    --with-python3-config-dir=/usr/lib/python3.5/config \
    --enable-perlinterp=yes \
    --enable-luainterp=yes \
    --enable-gui=auto \
    --enable-cscope \
    --prefix=/usr

	chk make -j 4
	chk sudo make install
  echo "done"
}

wizard_build_shellcheck() {
  # download and install the latest shellcheck

  chk wget \
    'http://ftp.us.debian.org/debian/pool/main/s/shellcheck/shellcheck_0.4.6-1_i386.deb'
  chk sudo dpkg -i shellcheck_*.deb || true
  chk sudo apt-get install -f
}

make_reflective_functions
wizard "$@"
