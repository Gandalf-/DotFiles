#!/bin/bash

# usage
#   sh prepare.sh (username)

# shellcheck disable=SC1090
source "$(dirname "$0")"/lib/reflection.sh

readonly green="\033[01;32m"
readonly normal="\033[00m"
readonly PLATFORM=$(uname)
QUIET=0

error() {
  printf "%b%s%b\n" "$green" "$*" "$normal"
  exit 1
}

chk() {
  printf "%b%s%b\n" "$green" "$*" "$normal"
  if (( QUIET )); then
    eval "$@" >/dev/null \
      || error "error running \"$*\""
  else
    eval "$@" \
      || error "error running \"$*\""
  fi
}

wizard_status_disk() {
  df -h
}

wizard_install_docker() {

  chk curl -fsSL 'https://download.docker.com/linux/ubuntu/gpg' \
    | sudo apt-key add -
  chk sudo add-apt-repository \
    "\"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\""
  chk sudo apt-get update
  chk apt-cache policy docker-ce
  chk sudo apt-get install -y docker-ce
}

wizard_status_weather() {
  curl http://wttr.in/~"${1:-Seattle}";
}

wizard_do_update () {
  chk sudo apt-add-repository ppa:fish-shell/release-2
  chk sudo apt update
  chk sudo apt upgrade
  chk sudo apt install tmux fish vim git make gcc libreadline-dev
}

wizard_do_security () {

  chk sudo ufw allow 22/tcp
  chk sudo ufw enable
}

wizard_do_vnc () {
  chk sudo apt install xfce4 xfce4-goodies tightvncserver
  chk sudo vncserver
  chk sudo vncserver -kill :1
  cat > "$HOME"/.vnc/xstartup << EOF
#!/bin/bash
xrdb \$HOME/.Xresources
startxfce4 &
EOF
  chk chmod +x "$HOME"/.vnc/xstartup
}

wizard_add_user () {
  user="$1"

  chk adduser "$user"
  chk usermod -aG sudo "$user"
  chk chsh -s /usr/bin/fish "$user"
  chk mkdir -p /home/"$user"/.ssh/
  chk cp -r /root/.ssh/ /home/"$user"/

  chk chown -R "$user:$user" /home/"$user"/
  return 1
}

wizard_add_configs () {
  chk git clone https://github.com/Gandalf-/DotFiles.git /tmp/DotFiles
  chk ln -sf /tmp/DotFiles/config.fish  /home/"$user"/.config/fish/config.fish
  chk ln -sf /tmp/DotFiles/vimrc        /home/"$user"/.vimrc
  chk ln -sf /tmp/DotFiles/tmux.conf    /home/"$user"/.tmux.conf
  chk ln -sf /tmp/DotFiles/bashrc       /home/"$user"/.bashrc

}

wizard_clean_boot() {

  dpkg --list \
    | grep linux-image \
    | awk '{ print $2 }' \
    | sort -V \
    | sed -n '/'"$(uname -r)"'/q;p' \
    | xargs sudo apt-get -y purge
}

wizard_clean_files() {

  local fixed dry=0 counter=0 usage="
  cleanup [-d|--dry]
    smart remove duplicate file names and intermediary file types
  "
  [[ $1 ]] || error "$usage"

  case "$1" in
    -d|--dry) dry=1 ;;
    *) error "$usage" ;;
  esac

  while read -r file; do
    fixed="$(sed -e 's/[ ]*([0-9]\+)//' <<< "$file")"

    # make sure the file still exists
    if [[ -e "$file" ]] ; then

      if [[ -f "$fixed" ]]; then
        echo "remove dup: $file"
        (( dry )) \
          || rm "$file" \
          || exit

      else
        echo "rename dup: $file"
        (( dry )) \
          || mv "$file" "$fixed" \
          || exit
      fi

      let counter++
    fi
  done < <(find . -regex '.*([0-9]+).*')

  while read -r file; do
    echo "remove: $file"

    (( dry )) \
      || rm "$file" \
      || exit
    let counter++

  done < <(find . -regex '.*\.\(pyc\|class\|o\|bak\)')

  if (( dry )); then
    echo "Would have cleaned up $counter files"
  else
    echo "Cleaned up $counter files"
  fi
  return 1
}

wizard_make_session() {
  # maybe string -> int
  #
  # create a new tmux session and move to it

  name=${1:-$RANDOM}
  tmux new -d -s "$name"
  tmux switch-client -t "$name"
  return 1
}

wizard_make_file_shell() {
  cat > "$1".sh << EOF
#!/bin/bash

main() {

  exit 0
}

main "\$@"
EOF
}


wizard_make_file_python() {
  cat > "$1.py" << EOF
#!/usr/bin/python

import sys

def main(args):
  ''' list of strings -> none
  '''
  pass

if __name__ == '__main__':
  main(sys.argv)
EOF
}

wizard_make_file_c() {
  cat > "$1".c << EOF
#include "$name.h"

int main(int argc, char *argv[]) {

  return 0;
}
EOF
}

wizard_make_file_cpp() {
  cat > "$1".cpp << EOF
#include "$name.h"

int main(int argc, char const *argv[]) {

  return 0;
}
EOF
}

wizard_make_file_java() {
  cat > "$1".java << EOF
public class $1 {

  public static void main(String[] argv) {

    System.out.println("Hello world");
  }
}
EOF
}

wizard_make_project_python() {
  chk mkdir "$1"
  chk cd "$1"
  wizard_make_file python "$1"
  return 1
}

wizard_make_project_c() {
  chk mkdir "$1"
  chk cd "$1"
  wizard_make_file c "$1"
  touch "$1".h
  mmake -l c -o "$1"
}

wizard_make_project_cpp() {
  chk mkdir "$1"
  chk cd "$1"
  wizard_make_file cpp "$1"
  touch "$1".h
  mmake -l cpp -o "$1"
}

wizard_make_project_java() {
  chk mkdir "$1"
  chk cd "$1"
  wizard_make_file java "$1"
  mmake -l java -o "$1"
}

wizard_update_platform() {
  # update everything, whatever that means

  case $PLATFORM in
    Linux)
      wizard update apt
      wizard update pip
      ;;
  esac
}

wizard_update_apt() {

  chk sudo apt update
  chk sudo apt upgrade -y
  chk sudo apt-get autoremove
}

wizard_update_pip() {

  sudo -H pip freeze --local \
    | grep -v '^\-e' \
    | cut -d = -f 1  \
    | xargs -n1 sudo -H pip install -U
}

wizard_build_vim () {
  # compile and install the lastest vim

  echo "installing vim"
  wizard_install_lua

	chk sudo apt-get build-dep vim-gnome
	chk sudo apt-get install \
    libncurses5-dev libgnome2-dev libgnomeui-dev \
		libgtk2.0-dev libatk1.0-dev libbonoboui2-dev \
		libcairo2-dev libx11-dev libxpm-dev libxt-dev

  chk cd /tmp/
  chk wget 'https://github.com/vim/vim/archive/master.zip'
  chk unzip master.zip
  chk cd vim-master

	chk ./configure \
    --with-features=huge \
    --with-lua-prefix=/usr/local \
    --enable-multibyte \
    --enable-rubyinterp=yes \
    --enable-pythoninterp=yes \
    --with-python-config-dir=/usr/lib/python2.7/config \
    --enable-python3interp=yes \
    --with-python3-config-dir=/usr/lib/python3.5/config \
    --enable-perlinterp=yes \
    --enable-luainterp=yes \
    --enable-gui=auto \
    --enable-cscope \
    --prefix=/usr

	chk make -j 4
	chk sudo make install
  echo "done"
}

wizard_install_java() {
  # install the Oracle JDK

  chk sudo add-apt-repository ppa:webupd8team/java
  chk sudo apt update
  chk sudo apt install oracle-java8-installer
}

wizard_install_shellcheck() {
  # download and install the latest shellcheck

  chk cd /tmp/
  chk wget \
    'http://ftp.us.debian.org/debian/pool/main/s/shellcheck/shellcheck_0.4.6-1_i386.deb'
  chk sudo dpkg -i shellcheck_*.deb || true
  chk sudo apt-get install -f
  chk cd -
}

wizard_install_lua() {
  # compile and install lua 5.3.3

  echo "installing lua"
  chk cd /tmp/

  chk wget 'https://www.lua.org/ftp/lua-5.3.3.tar.gz'
  chk tar zxvf lua-5.3.3.tar.gz
  chk cd lua-5.3.3
  chk make linux
  chk sudo make install

  chk cd -
  echo "done"
}

wizard_do_insync() {
  # run insync-headless commands

  local usage="
     s : start
    ps : pause syncing
    rs : resume syncing
    re : retry errors
    gs : get status
    ge : get errors
   gsp : get sync progress
  "
  [[ $1 ]] || error "$usage"

  case "$1" in
    s)   insync-headless start             ;;
    ps)  insync-headless pause_syncing     ;;
    rs)  insync-headless resume_syncing    ;;
    re)  insync-headless retry_errors      ;;
    gs)  insync-headless get_status        ;;
    ge)  insync-headless get_errors        ;;
    gsp) insync-headless get_sync_progress ;;
    *)   error "$usage" ;;
  esac
  return 1
}

wizard_find() {
  # find by file name or contents

  local usage fuzzy=1 file=1 text=1 args=1 prog=1
  local usage="
  wizard find [option] [object]

    option
      --exact
      --text-only
      --file-only
  "
  [[ $1 ]] || error "$usage"

  while [[ $1 ]]; do
    case $1 in
      -e|--exact)     fuzzy=0 ;;
      -t|--text-only) file=0; prog=0 ;;
      -f|--file-only) text=0; prog=0 ;;
      -p|--prog-only) file=0; text=0 ;;
      *) break ;;
    esac
    shift; let args++
  done

  local ag_options="-lS $1"
  local find_options=". -iname $1"
  local which_options="$1"

  if (( fuzzy )); then
    ag_options="-lS $1"
    find_options=". -iname *$1*"
    which_options="$1"
  fi

  # shellcheck disable=SC2086
  {
    (( text )) && { ag --nocolor $ag_options; echo; }
    (( file )) && { find $find_options;       echo; }
    (( prog )) && { which $which_options;     echo; }
  }

  return $args
}

wizard_open() {

  echo "nop"
}

wizard_kill() {

  echo "nop"
}

# shellcheck disable=SC2034,SC2154,SC2016
{
meta_head[wizard_make_file]='
[[ $2 ]] || error "You must provide a name"
'
meta_head[wizard_make_project]='
[[ $2 ]] || error "You must provide a name"
'
}

make_reflective_functions
wizard "$@"
exit 0
