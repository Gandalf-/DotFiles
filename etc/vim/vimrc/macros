" vi: ft=vim

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Macros
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
  let g:mapleader = " "

" List macros
  nnoremap <leader>? :echo "
        \  : clear highlighting        \n
        \+ : toggle dictionary         \n
        \1 : jump to tab number        \n
        \A :                           \| a : jump to next error        \n
        \B :                           \| b : toggle mouse              \n
        \C :                           \| c :                           \n
        \D : git buffer with orig file \| d : file explorer             \n
        \E :                           \| e : open in new buffer        \n
        \F :                           \| f : rewrap paragraph          \n
        \G :                           \| g :                           \n
        \H : horizontal split          \| h : tag select                \n
        \I :                           \| i : paste result of command   \n
        \J : scroll to bottom of screen\| j : jump to last buffer       \n
        \K : auto scroll down          \| k : save                      \n
        \L : list!                     \| l : reload file               \n
        \M :                           \| m : mundo toggle              \n
        \N : print pwd                 \| n : cycle windows             \n
        \O : insert line above         \| o : insert line below         \n
        \P :                           \| p : toggle paste              \n
        \Q : close all windows         \| q : close window              \n
        \R : toggle relative numbering \| r : run buffer                \n
        \S : global substitute         \| s : line substitute           \n
        \T :                           \| t : tab current buffer        \n
        \U : source vimrc              \| u : open vimrc                \n
        \V : vertical split            \| v : visual block              \n
        \W : sudo save                 \| w : close window              \n
        \X :                           \| x : close buffer              \n
        \Y :                           \| y : run in right pane         \n
        \Z :                           \| z : toggle spell check        \n
        \"<CR>

" fzf
  nnoremap <leader>[ :Buffers<CR>
  nnoremap <leader>] :Files<CR>

" vimux
  nnoremap <C-i> :VimuxPromptCommand<CR>
  nnoremap <C-b> :VimuxRunLastCommand<CR>

" ale
  nnoremap <leader>a :ALENextWrap<CR>
  nnoremap <C-a> :ALEDetail<CR>

" diff buffer with original file
  nnoremap <leader>D :w !git diff % -<CR>

" clear highlighting
  nnoremap <silent> <leader><Space> :nohl<CR>

" Scroll to bottom for note taking
  nnoremap <silent> <leader>J 100<c-e>5<c-y>

" super secret encryption algorithm
  nnoremap <silent> <leader>G ggg?G<C-o>

" open vimrc, source vimrc
  nnoremap <silent> <leader>u :tabe $MYVIMRC<cr>
  nnoremap <silent> <leader>U :so $MYVIMRC<cr>

" re hardwrap a paragraph
  nnoremap <silent> <leader>f gqip<cr>

" split the screen and move there
  nnoremap <silent> <leader>V <C-w>v<C-w>l
  nnoremap <silent> <leader>H <C-w>s

" tags
  nnoremap <leader>h :tselect<Space>

" windows
  nnoremap <silent> <leader>q :q<CR>
  nnoremap <silent> <leader>Q :qall<CR>
  command! Q :qall
  nnoremap <silent> <leader>n <C-w><C-w>

" stay in visual mode while changing indentation
  vnoremap < <gv
  vnoremap > >gv

" shell + tmux pane commands
  function! Run_Command(command)
    execute "silent !tmux send-keys -t right '" . a:command . "' C-m"
    execute "redraw!"
  endfunction

" toggling
  nnoremap <silent> <leader>L :set list!<CR>
  nnoremap <silent> <leader>z :set spell!<CR>
  nnoremap <silent> <leader>R :set relativenumber!<CR>
  function! SmartPaste()
    setlocal nu!
    if &paste
      setlocal nopaste
      setlocal foldcolumn=1
      :ALEEnableBuffer
    else
      setlocal paste
      setlocal foldcolumn=0
      :ALEDisableBuffer
    endif
  endfunction
  nnoremap <leader>p :call SmartPaste() <cr>

" close, jump to last, make new buffer
  nnoremap <silent> <leader>x :bp<bar>sp<bar>bn<bar>bd<CR>
  nnoremap <silent> <leader>j :w<bar>b#<CR>
  nnoremap <silent> <leader>t :tabe %<cr>

" paste result of command
  nnoremap          <leader>i :r!

" open buffer, open tab, reload, save, sudo save current file
  nnoremap <leader>e :e<space>
  nnoremap <leader>E :tabe<space>
  nnoremap <leader>l :e % <cr>zz
  nnoremap <leader>k :w<CR>

" insert a blank line above,below the current line
  nnoremap <silent> <leader>O O<Esc>
  nnoremap <silent> <leader>o o<Esc>

" Mundo Undo Tree
  nnoremap <silent> <leader>m :MundoToggle<CR>

" visual block mode
  nnoremap <silent> <leader>v <C-S-v>

" generic ':' command
  nnoremap m :
  vnoremap m :
  nnoremap <leader>; :
  vnoremap <leader>; :

" substitute line, global
  vnoremap <leader>s :s/
  nnoremap <leader>s V:s/
  nnoremap <leader>S :%s/

" repeat last colon command
  nnoremap <leader>. q:k<cr>
  vnoremap <leader>. q:k<cr>

" go to tab by number
  noremap <leader>1 1gt
  noremap <leader>2 2gt
  noremap <leader>3 3gt
  noremap <leader>4 4gt
  noremap <leader>5 5gt
  noremap <leader>6 6gt
  noremap <leader>7 7gt
  noremap <leader>8 8gt
  noremap <leader>9 9gt
  noremap <leader>0 :tablast<cr>

" running programs in Vim!
  function! Compile(compile_command)
    if filereadable("./Makefile") || filereadable("./makefile")
      make
    else
      execute "!" . a:compile_command . " " . bufname("%")
    endif
  endfunction

" macro autocommands
augroup macro_commands
  autocmd!
  autocmd FileType python  nmap <leader>r :!clear;python %<cr>
  autocmd FileType scheme  nmap <leader>r :!clear;racket %<cr>
  autocmd FileType sh      nmap <leader>r :!clear;bash %<cr>
  autocmd FileType perl    nmap <leader>r :!clear;perl %<cr>
  autocmd FileType haskell nmap <leader>r :!clear;runhaskell %<cr>

  autocmd FileType java    nmap <leader>r
        \ :silent call Compile("javac")<cr> <bar>:!clear;java %:r<cr>
  autocmd FileType c       nmap <leader>r
        \ :silent call Compile("clang")  <cr> <bar>:!clear;./a.out <cr>
  autocmd FileType cpp     nmap <leader>r
        \ :silent call Compile("clang++ -std=c++11")  <cr> <bar>:!clear;./a.out <cr>

" Run program in pane to the right
  autocmd FileType python
        \ nnoremap <leader>y :!tmux send-keys -t right
        \ 'python %' C-m <cr><cr>
  autocmd FileType sh
        \ nnoremap <leader>y :!tmux send-keys -t right
        \ 'bash %' C-m<cr><cr>
augroup end

" Experiment
" nnoremap / /\v
" vnoremap / /\v

" Search across all open buffers
  function! BuffersList()
    let all = range(0, bufnr('$'))
    let res = []
    for b in all
      if buflisted(b)
        call add(res, bufname(b))
      endif
    endfor
    return res
  endfunction

  function! GrepBuffers(expression)
    exec 'vimgrep/'.a:expression.'/ '.join(BuffersList())
  endfunction

  command! -nargs=+ GrepBufs call GrepBuffers(<q-args>)
  nnoremap <leader>/ :GrepBufs
  nnoremap <leader>*
        \ :call GrepBuffers("<C-R><C-W>")<CR> <bar> :copen 7<cr>

" Where are we?
  function! CurrentDir()
    :!clear;readlink -f %
  endfunction
  nnoremap <leader>N :call CurrentDir()<cr>
