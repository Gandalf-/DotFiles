#!/bin/bash
# this is an auto generated file. do not edit manually
      
_confirm () 
{ 
    val=$1;
    shift;
    confirm "$val" "${@/ \"\"/}" && eval "${@/ \"\"/}"
}
autocli::create () 
{ 
    auto_lib="$1";
    sources=("${@:2}");
    recompile=0;
    now="$(date +%s -r "$auto_lib" 2>/dev/null)";
    for source in "${sources[@]}";
    do
        [[ -f "$source" && $now -lt "$(date +%s -r "$source")" ]] && recompile=1;
    done;
    if (( recompile )) || [[ ! -f "$auto_lib" ]]; then
        declare -A meta_head meta_body;
        for source in "${sources[@]}";
        do
            [[ -f "$source" ]] && source "$source";
        done;
        autocli::make_reflective_functions;
        { 
            echo '#!/bin/bash
# this is an auto generated file. do not edit manually
      ';
            declare -f -p
        } > "$auto_lib";
    fi;
    source "$auto_lib"
}
autocli::make () 
{ 
    [[ -n $1 ]] || "${FUNCNAME[0]}" --help;
    local __ret __shifts=0;
    local __usage="
  reflective ...";
    local __name="autocli::make";
    while [[ -n $1 ]]; do
        case $1 in 
            "r" | "re" | "ref" | "refl" | "refle" | "reflec" | "reflect" | "reflecti" | "reflectiv" | "reflective")
                autocli::make_reflective "${@:2}"
            ;;
            *)
                if [[ -n $usage ]]; then
                    echo "$usage";
                else
                    echo;
                    echo "$__name";
                    echo "$__usage";
                    echo;
                fi
            ;;
        esac;
        __ret=$?;
        shift;
        shift $__ret;
        let __shifts+=$__ret+1;
    done;
    return $__shifts
}
autocli::make_reflective () 
{ 
    [[ -n $1 ]] || "${FUNCNAME[0]}" --help;
    local __ret __shifts=0;
    local __usage="
  functions";
    local __name="autocli::make reflective";
    while [[ -n $1 ]]; do
        case $1 in 
            "f" | "fu" | "fun" | "func" | "funct" | "functi" | "functio" | "function" | "functions")
                autocli::make_reflective_functions "${@:2}"
            ;;
            *)
                if [[ -n $usage ]]; then
                    echo "$usage";
                else
                    echo;
                    echo "$__name";
                    echo "$__usage";
                    echo;
                fi
            ;;
        esac;
        __ret=$?;
        shift;
        shift $__ret;
        let __shifts+=$__ret+1;
    done;
    return $__shifts
}
autocli::make_reflective_functions () 
{ 
    declare -A __meta_functions;
    local i j sub_commands=();
    while read -r func; do
        sub_commands+=("${func//_/ }");
    done < <(declare -F -p | cut -d ' ' -f 3);
    for ((i=0; i < ${#sub_commands[@]}; i++))
    do
        local commands=(${sub_commands[$i]});
        local len=${#commands[@]};
        local base=${commands[0]};
        for ((j=1; j < len; j++))
        do
            common::debug echo "assign __meta_functions[$base] += ${commands[$j]}";
            if ! [[ ${__meta_functions[$base]} =~ .*${commands[$j]}.* ]]; then
                __meta_functions[$base]+="${commands[$j]} ";
            fi;
            base+="_${commands[$j]}";
        done;
    done;
    common::debug declare -p __meta_functions;
    common::debug echo "keys ${!__meta_functions[*]}";
    local existing_functions;
    existing_functions=($(declare -F | cut -d ' ' -f 3));
    for meta_func in "${!__meta_functions[@]}";
    do
        common::debug echo "meta_func: $meta_func, ${__meta_functions[$meta_func]}";
        if [[ ${existing_functions[*]} =~ .*$meta_func\ .* ]]; then
            echo "looks like $meta_func already exists! check your definitions";
            exit 1;
        fi;
        local auto_name;
        auto_name="$(tr '_' ' ' <<< "$meta_func")";
        local auto_usage="";
        local function_body="";
        for sub_func in ${__meta_functions[$meta_func]};
        do
            local cases="\"${sub_func:0:1}\"";
            for ((i=2; i < $(( ${#sub_func} + 1)); i++))
            do
                cases+="|\"${sub_func:0:$i}\"";
            done;
            function_body+="
        $cases)
          ${meta_func}_$sub_func \"\${@:2}\";; ";
            if [[ -n ${__meta_functions[${meta_func}_$sub_func]} ]]; then
                auto_usage+="
  $sub_func ...";
            else
                auto_usage+="
  $sub_func";
            fi;
        done;
        function_body+="*)
      if [[ \$usage ]]; then
        echo \"\$usage\"
      else
        echo
        echo \"\$__name\"
        echo \"\$__usage\"
        echo
      fi
      ;;
    ";
        eval "
    $meta_func() {
      [[ \$1 ]] || \"\${FUNCNAME[0]}\" --help
      local __ret __shifts=0
      local __usage=\"$auto_usage\"
      local __name=\"${auto_name}\"
      ${meta_head[$meta_func]}

      while [[ \$1 ]]; do
        case \$1 in
          ${meta_body[$meta_func]}
          $function_body
        esac

        __ret=\$?; shift; shift \$__ret; let __shifts+=\$__ret+1
      done
      return \$__shifts
    }
    ";
    done;
    common::debug declare -f
}
common::color () 
{ 
    [[ -n $1 ]] || "${FUNCNAME[0]}" --help;
    local __ret __shifts=0;
    local __usage="
  error";
    local __name="common::color";
    while [[ -n $1 ]]; do
        case $1 in 
            "e" | "er" | "err" | "erro" | "error")
                common::color_error "${@:2}"
            ;;
            *)
                if [[ -n $usage ]]; then
                    echo "$usage";
                else
                    echo;
                    echo "$__name";
                    echo "$__usage";
                    echo;
                fi
            ;;
        esac;
        __ret=$?;
        shift;
        shift $__ret;
        let __shifts+=$__ret+1;
    done;
    return $__shifts
}
common::color_error () 
{ 
    printf "%b%s%b\n" "$green" "$*" "$normal";
    exit 1
}
common::debug () 
{ 
    (( "$DEBUG" )) && eval "$*"
}
common::do () 
{ 
    printf "%b%s%b\n" "$green" "$*" "$normal";
    if (( QUIET )); then
        eval "$@" > /dev/null || common::color_error "error running \"$*\"";
    else
        if (( SILENT )); then
            eval "$@" > /dev/null 2> /dev/null || common::color_error "error running \"$*\"";
        else
            eval "$@" || common::color_error "error running \"$*\"";
        fi;
    fi
}
common::error () 
{ 
    echo "$*";
    exit 1
}
common::optional () 
{ 
    [[ -n $1 ]] || "${FUNCNAME[0]}" --help;
    local __ret __shifts=0;
    local __usage="
  help";
    local __name="common::optional";
    while [[ -n $1 ]]; do
        case $1 in 
            "h" | "he" | "hel" | "help")
                common::optional_help "${@:2}"
            ;;
            *)
                if [[ -n $usage ]]; then
                    echo "$usage";
                else
                    echo;
                    echo "$__name";
                    echo "$__usage";
                    echo;
                fi
            ;;
        esac;
        __ret=$?;
        shift;
        shift $__ret;
        let __shifts+=$__ret+1;
    done;
    return $__shifts
}
common::optional_help () 
{ 
    caller="$(tr '_' ' ' <<< "${FUNCNAME[1]}")";
    case $1 in 
        -h | --help)
            common::error "
${caller} ${*:2}"
        ;;
    esac
}
common::required () 
{ 
    [[ -n $1 ]] || "${FUNCNAME[0]}" --help;
    local __ret __shifts=0;
    local __usage="
  help";
    local __name="common::required";
    while [[ -n $1 ]]; do
        case $1 in 
            "h" | "he" | "hel" | "help")
                common::required_help "${@:2}"
            ;;
            *)
                if [[ -n $usage ]]; then
                    echo "$usage";
                else
                    echo;
                    echo "$__name";
                    echo "$__usage";
                    echo;
                fi
            ;;
        esac;
        __ret=$?;
        shift;
        shift $__ret;
        let __shifts+=$__ret+1;
    done;
    return $__shifts
}
common::required_help () 
{ 
    caller="$(tr '_' ' ' <<< "${FUNCNAME[1]}")";
    case $1 in 
        "" | -h | --help)
            common::error "
${caller} ${*:2}"
        ;;
    esac
}
common::return () 
{ 
    return "$1"
}
common::sudo () 
{ 
    common::do "sudo" "$@"
}
confirm () 
{ 
    if [[ "$1" != 0 ]]; then
        shift;
        printf "%b%s%b " "$green" "$@" "$normal";
        read -r reply;
        [[ "$reply" =~ [Nn] ]] && exit 1;
        return 0;
    else
        shift;
        printf "%b%s%b\n" "$green" "$@" "$normal";
        return 0;
    fi
}
wizard () 
{ 
    [[ -n $1 ]] || "${FUNCNAME[0]}" --help;
    local __ret __shifts=0;
    local __usage="
  add ...
  build ...
  clean ...
  do ...
  find
  install ...
  make ...
  open
  show ...
  start ...
  update ...";
    local __name="wizard";
    common::required_help "$1" "(-q | -s)
$__usage
";
    while [[ -n $1 ]]; do
        case $1 in 
            -q | --quiet)
                QUIET=1
            ;;
            -s | --silent)
                SILENT=1
            ;;
            "a" | "ad" | "add")
                wizard_add "${@:2}"
            ;;
            "b" | "bu" | "bui" | "buil" | "build")
                wizard_build "${@:2}"
            ;;
            "c" | "cl" | "cle" | "clea" | "clean")
                wizard_clean "${@:2}"
            ;;
            "d" | "do")
                wizard_do "${@:2}"
            ;;
            "f" | "fi" | "fin" | "find")
                wizard_find "${@:2}"
            ;;
            "i" | "in" | "ins" | "inst" | "insta" | "instal" | "install")
                wizard_install "${@:2}"
            ;;
            "m" | "ma" | "mak" | "make")
                wizard_make "${@:2}"
            ;;
            "o" | "op" | "ope" | "open")
                wizard_open "${@:2}"
            ;;
            "s" | "sh" | "sho" | "show")
                wizard_show "${@:2}"
            ;;
            "s" | "st" | "sta" | "star" | "start")
                wizard_start "${@:2}"
            ;;
            "u" | "up" | "upd" | "upda" | "updat" | "update")
                wizard_update "${@:2}"
            ;;
            *)
                if [[ -n $usage ]]; then
                    echo "$usage";
                else
                    echo;
                    echo "$__name";
                    echo "$__usage";
                    echo;
                fi
            ;;
        esac;
        __ret=$?;
        shift;
        shift $__ret;
        let __shifts+=$__ret+1;
    done;
    return $__shifts
}
wizard_add () 
{ 
    [[ -n $1 ]] || "${FUNCNAME[0]}" --help;
    local __ret __shifts=0;
    local __usage="
  configs
  user";
    local __name="wizard add";
    while [[ -n $1 ]]; do
        case $1 in 
            "c" | "co" | "con" | "conf" | "confi" | "config" | "configs")
                wizard_add_configs "${@:2}"
            ;;
            "u" | "us" | "use" | "user")
                wizard_add_user "${@:2}"
            ;;
            *)
                if [[ -n $usage ]]; then
                    echo "$usage";
                else
                    echo;
                    echo "$__name";
                    echo "$__usage";
                    echo;
                fi
            ;;
        esac;
        __ret=$?;
        shift;
        shift $__ret;
        let __shifts+=$__ret+1;
    done;
    return $__shifts
}
wizard_add_configs () 
{ 
    common::do git clone https://github.com/Gandalf-/DotFiles.git /tmp/DotFiles;
    common::do mkdir -p "$HOME"/.config/fish;
    common::do ln -sf /tmp/DotFiles/config.fish "$HOME"/.config/fish/config.fish;
    common::do ln -sf /tmp/DotFiles/vimrc "$HOME"/.vimrc;
    common::do ln -sf /tmp/DotFiles/tmux.conf "$HOME"/.tmux.conf;
    common::do ln -sf /tmp/DotFiles/bashrc "$HOME"/.bashrc
}
wizard_add_user () 
{ 
    common::required_help "$1" "[user name]

  add a new sudo user to the system
  ";
    user="$1";
    common::do adduser "$user";
    common::do usermod -aG sudo "$user";
    common::do chsh -s /usr/bin/fish "$user";
    common::do mkdir -p /home/"$user"/.ssh/;
    common::do cp -r /root/.ssh/ /home/"$user"/;
    common::do chown -R "$user:$user" /home/"$user"/;
    return 1
}
wizard_build () 
{ 
    [[ -n $1 ]] || "${FUNCNAME[0]}" --help;
    local __ret __shifts=0;
    local __usage="
  vim";
    local __name="wizard build";
    while [[ -n $1 ]]; do
        case $1 in 
            "v" | "vi" | "vim")
                wizard_build_vim "${@:2}"
            ;;
            *)
                if [[ -n $usage ]]; then
                    echo "$usage";
                else
                    echo;
                    echo "$__name";
                    echo "$__usage";
                    echo;
                fi
            ;;
        esac;
        __ret=$?;
        shift;
        shift $__ret;
        let __shifts+=$__ret+1;
    done;
    return $__shifts
}
wizard_build_vim () 
{ 
    echo "installing vim";
    wizard install lua;
    common::sudo apt-get build-dep vim-gnome;
    common::sudo apt-get install libncurses5-dev libgnome2-dev libgnomeui-dev libgtk2.0-dev libatk1.0-dev libbonoboui2-dev libcairo2-dev libx11-dev libxpm-dev libxt-dev;
    common::do cd /tmp/;
    common::do wget 'https://github.com/vim/vim/archive/master.zip';
    common::do unzip master.zip;
    common::do cd vim-master;
    common::do ./configure --with-features=huge --with-lua-prefix=/usr/local --enable-multibyte --enable-rubyinterp=yes --enable-pythoninterp=yes --with-python-config-dir=/usr/lib/python2.7/config --enable-python3interp=yes --with-python3-config-dir=/usr/lib/python3.5/config --enable-perlinterp=yes --enable-luainterp=yes --enable-gui=auto --enable-cscope --prefix=/usr;
    common::do make -j 4;
    common::sudo make install;
    echo "done"
}
wizard_clean () 
{ 
    [[ -n $1 ]] || "${FUNCNAME[0]}" --help;
    local __ret __shifts=0;
    local __usage="
  apt
  boot
  files";
    local __name="wizard clean";
    while [[ -n $1 ]]; do
        case $1 in 
            "a" | "ap" | "apt")
                wizard_clean_apt "${@:2}"
            ;;
            "b" | "bo" | "boo" | "boot")
                wizard_clean_boot "${@:2}"
            ;;
            "f" | "fi" | "fil" | "file" | "files")
                wizard_clean_files "${@:2}"
            ;;
            *)
                if [[ -n $usage ]]; then
                    echo "$usage";
                else
                    echo;
                    echo "$__name";
                    echo "$__usage";
                    echo;
                fi
            ;;
        esac;
        __ret=$?;
        shift;
        shift $__ret;
        let __shifts+=$__ret+1;
    done;
    return $__shifts
}
wizard_clean_apt () 
{ 
    common::optional_help "$1" "

  force purge removed apt packages
  ";
    dpkg --list | grep "^rc" | cut -d " " -f 3 | xargs sudo dpkg --purge || common::color_error "Looks like there's nothing to clean!"
}
wizard_clean_boot () 
{ 
    common::optional_help "$1" "

  safely cleans up old Linux kernel versions from /boot
  ";
    dpkg --list | grep linux-image | awk '{ print $2 }' | sort -V | sed -n '/'"$(uname -r)"'/q;p' | xargs sudo apt-get -y purge;
    return $#
}
wizard_clean_files () 
{ 
    local fixed dry=0 counter=0 usage="
  $__name [-d|--dry]
    smart remove duplicate file names and intermediary file types
  ";
    case "$1" in 
        -d | --dry)
            dry=1
        ;;
        *)
            common::error "$usage"
        ;;
    esac;
    while read -r file; do
        fixed="$(sed -e 's/[ ]*([0-9]\+)//' <<< "$file")";
        if [[ -e "$file" ]]; then
            if [[ -f "$fixed" ]]; then
                echo "remove dup: $file";
                (( dry )) || rm "$file" || exit;
            else
                echo "rename dup: $file";
                (( dry )) || mv "$file" "$fixed" || exit;
            fi;
            let counter++;
        fi;
    done < <(find . -regex '.*([0-9]+).*');
    while read -r file; do
        echo "remove: $file";
        (( dry )) || rm "$file" || exit;
        let counter++;
    done < <(find . -regex '.*\.\(pyc\|class\|o\|bak\)');
    if (( dry )); then
        echo "Would have cleaned up $counter files";
    else
        echo "Cleaned up $counter files";
    fi;
    return 1
}
wizard_do () 
{ 
    [[ -n $1 ]] || "${FUNCNAME[0]}" --help;
    local __ret __shifts=0;
    local __usage="
  first-time-install ...
  frequencies
  insync ...
  layout ...
  parse ...
  pin-to-home
  ratio
  transcode ...";
    local __name="wizard do";
    while [[ -n $1 ]]; do
        case $1 in 
            "f" | "fi" | "fir" | "firs" | "first" | "first-" | "first-t" | "first-ti" | "first-tim" | "first-time" | "first-time-" | "first-time-i" | "first-time-in" | "first-time-ins" | "first-time-inst" | "first-time-insta" | "first-time-instal" | "first-time-install")
                wizard_do_first-time-install "${@:2}"
            ;;
            "f" | "fr" | "fre" | "freq" | "frequ" | "freque" | "frequen" | "frequenc" | "frequenci" | "frequencie" | "frequencies")
                wizard_do_frequencies "${@:2}"
            ;;
            "i" | "in" | "ins" | "insy" | "insyn" | "insync")
                wizard_do_insync "${@:2}"
            ;;
            "l" | "la" | "lay" | "layo" | "layou" | "layout")
                wizard_do_layout "${@:2}"
            ;;
            "p" | "pa" | "par" | "pars" | "parse")
                wizard_do_parse "${@:2}"
            ;;
            "p" | "pi" | "pin" | "pin-" | "pin-t" | "pin-to" | "pin-to-" | "pin-to-h" | "pin-to-ho" | "pin-to-hom" | "pin-to-home")
                wizard_do_pin-to-home "${@:2}"
            ;;
            "r" | "ra" | "rat" | "rati" | "ratio")
                wizard_do_ratio "${@:2}"
            ;;
            "t" | "tr" | "tra" | "tran" | "trans" | "transc" | "transco" | "transcod" | "transcode")
                wizard_do_transcode "${@:2}"
            ;;
            *)
                if [[ -n $usage ]]; then
                    echo "$usage";
                else
                    echo;
                    echo "$__name";
                    echo "$__usage";
                    echo;
                fi
            ;;
        esac;
        __ret=$?;
        shift;
        shift $__ret;
        let __shifts+=$__ret+1;
    done;
    return $__shifts
}
wizard_do_first-time-install () 
{ 
    [[ -n $1 ]] || "${FUNCNAME[0]}" --help;
    local __ret __shifts=0;
    local __usage="
  small";
    local __name="wizard do first-time-install";
    while [[ -n $1 ]]; do
        case $1 in 
            "s" | "sm" | "sma" | "smal" | "small")
                wizard_do_first-time-install_small "${@:2}"
            ;;
            *)
                if [[ -n $usage ]]; then
                    echo "$usage";
                else
                    echo;
                    echo "$__name";
                    echo "$__usage";
                    echo;
                fi
            ;;
        esac;
        __ret=$?;
        shift;
        shift $__ret;
        let __shifts+=$__ret+1;
    done;
    return $__shifts
}
wizard_do_first-time-install_small () 
{ 
    common::sudo apt-add-repository ppa:fish-shell/release-2;
    common::sudo apt update;
    common::sudo apt upgrade;
    common::sudo apt install make gcc libreadline-dev build-essential cmake tmux fish vim git ipython python-pip silversearcher-ag
}
wizard_do_frequencies () 
{ 
    common::required_help "$1" "$__name [amount]";
    sort | uniq -c | sort -nr | head -n "$1";
    return 1
}
wizard_do_insync () 
{ 
    [[ -n $1 ]] || "${FUNCNAME[0]}" --help;
    local __ret __shifts=0;
    local __usage="
  errors
  pause-syncing
  resume-syncing
  retry-errors
  start
  status
  sync-progress";
    local __name="wizard do insync";
    while [[ -n $1 ]]; do
        case $1 in 
            "e" | "er" | "err" | "erro" | "error" | "errors")
                wizard_do_insync_errors "${@:2}"
            ;;
            "p" | "pa" | "pau" | "paus" | "pause" | "pause-" | "pause-s" | "pause-sy" | "pause-syn" | "pause-sync" | "pause-synci" | "pause-syncin" | "pause-syncing")
                wizard_do_insync_pause-syncing "${@:2}"
            ;;
            "r" | "re" | "res" | "resu" | "resum" | "resume" | "resume-" | "resume-s" | "resume-sy" | "resume-syn" | "resume-sync" | "resume-synci" | "resume-syncin" | "resume-syncing")
                wizard_do_insync_resume-syncing "${@:2}"
            ;;
            "r" | "re" | "ret" | "retr" | "retry" | "retry-" | "retry-e" | "retry-er" | "retry-err" | "retry-erro" | "retry-error" | "retry-errors")
                wizard_do_insync_retry-errors "${@:2}"
            ;;
            "s" | "st" | "sta" | "star" | "start")
                wizard_do_insync_start "${@:2}"
            ;;
            "s" | "st" | "sta" | "stat" | "statu" | "status")
                wizard_do_insync_status "${@:2}"
            ;;
            "s" | "sy" | "syn" | "sync" | "sync-" | "sync-p" | "sync-pr" | "sync-pro" | "sync-prog" | "sync-progr" | "sync-progre" | "sync-progres" | "sync-progress")
                wizard_do_insync_sync-progress "${@:2}"
            ;;
            *)
                if [[ -n $usage ]]; then
                    echo "$usage";
                else
                    echo;
                    echo "$__name";
                    echo "$__usage";
                    echo;
                fi
            ;;
        esac;
        __ret=$?;
        shift;
        shift $__ret;
        let __shifts+=$__ret+1;
    done;
    return $__shifts
}
wizard_do_insync_errors () 
{ 
    insync-headless get_errors
}
wizard_do_insync_pause-syncing () 
{ 
    insync-headless pause_syncing
}
wizard_do_insync_resume-syncing () 
{ 
    insync-headless resume_syncing
}
wizard_do_insync_retry-errors () 
{ 
    insync-headless retry_errors
}
wizard_do_insync_start () 
{ 
    insync-headless start
}
wizard_do_insync_status () 
{ 
    insync-headless get_status
}
wizard_do_insync_sync-progress () 
{ 
    insync-headless get_sync_progress
}
wizard_do_layout () 
{ 
    [[ -n $1 ]] || "${FUNCNAME[0]}" --help;
    local __ret __shifts=0;
    local __usage="
  horizontal
  tiled
  vertical";
    local __name="wizard do layout";
    while [[ -n $1 ]]; do
        case $1 in 
            "h" | "ho" | "hor" | "hori" | "horiz" | "horizo" | "horizon" | "horizont" | "horizonta" | "horizontal")
                wizard_do_layout_horizontal "${@:2}"
            ;;
            "t" | "ti" | "til" | "tile" | "tiled")
                wizard_do_layout_tiled "${@:2}"
            ;;
            "v" | "ve" | "ver" | "vert" | "verti" | "vertic" | "vertica" | "vertical")
                wizard_do_layout_vertical "${@:2}"
            ;;
            *)
                if [[ -n $usage ]]; then
                    echo "$usage";
                else
                    echo;
                    echo "$__name";
                    echo "$__usage";
                    echo;
                fi
            ;;
        esac;
        __ret=$?;
        shift;
        shift $__ret;
        let __shifts+=$__ret+1;
    done;
    return $__shifts
}
wizard_do_layout_horizontal () 
{ 
    tmux select-layout even-horizontal
}
wizard_do_layout_tiled () 
{ 
    tmux select-layout tiled
}
wizard_do_layout_vertical () 
{ 
    tmux select-layout even-vertical
}
wizard_do_parse () 
{ 
    [[ -n $1 ]] || "${FUNCNAME[0]}" --help;
    local __ret __shifts=0;
    local __usage="
  json
  xml";
    local __name="wizard do parse";
    while [[ -n $1 ]]; do
        case $1 in 
            "j" | "js" | "jso" | "json")
                wizard_do_parse_json "${@:2}"
            ;;
            "x" | "xm" | "xml")
                wizard_do_parse_xml "${@:2}"
            ;;
            *)
                if [[ -n $usage ]]; then
                    echo "$usage";
                else
                    echo;
                    echo "$__name";
                    echo "$__usage";
                    echo;
                fi
            ;;
        esac;
        __ret=$?;
        shift;
        shift $__ret;
        let __shifts+=$__ret+1;
    done;
    return $__shifts
}
wizard_do_parse_json () 
{ 
    python -m json.tool
}
wizard_do_parse_xml () 
{ 
    common::required_help "$1" "< file.xml

  pipe in a file an pretty print XML
  ";
    xmllint --format -
}
wizard_do_pin-to-home () 
{ 
    [[ ! -z "$*" ]] && ln -s "$@" ~/
}
wizard_do_ratio () 
{ 
    common::required_help "$1" "[amount]

  count the occurances of each input line, produce ratio data
  ";
    sort | uniq -c | sort -nr | head -n "$1" | awk '{a[$2]=$1;s+=$1}END{for(i in a)printf"%-40s%-15d%6.2f%%\n",i,a[i],a[i]/s*100}' | sort -r -k 2,2 -n;
    return 1
}
wizard_do_transcode () 
{ 
    [[ -n $1 ]] || "${FUNCNAME[0]}" --help;
    local __ret __shifts=0;
    local __usage="
  movies";
    local __name="wizard do transcode";
    while [[ -n $1 ]]; do
        case $1 in 
            "m" | "mo" | "mov" | "movi" | "movie" | "movies")
                wizard_do_transcode_movies "${@:2}"
            ;;
            *)
                if [[ -n $usage ]]; then
                    echo "$usage";
                else
                    echo;
                    echo "$__name";
                    echo "$__usage";
                    echo;
                fi
            ;;
        esac;
        __ret=$?;
        shift;
        shift $__ret;
        let __shifts+=$__ret+1;
    done;
    return $__shifts
}
wizard_do_transcode_movies () 
{ 
    local preset=slow;
    echo "Processing: $*";
    for file in "$@";
    do
        ffmpeg -hide_banner -i "$file" -c:v libx264 -crf 19 -preset "$preset" -strict -2 -c:a aac -b:a 192k -ac 2 "${file%.*}.mp4" || common::error "failed on \"$file\". Giving up";
        echo "Waiting...";
        sleep 5;
        rm "$file";
    done;
    return $#
}
wizard_find () 
{ 
    local fuzzy=1 file=1 text=1 args=1 prog=1;
    common::required_help "$1" "(option) [object]

    option
      --exact
      --text-only
      --file-only
  ";
    while [[ -n $1 ]]; do
        case $1 in 
            -e | --exact)
                fuzzy=0
            ;;
            -t | --text-only)
                file=0;
                prog=0
            ;;
            -f | --file-only)
                text=0;
                prog=0
            ;;
            -p | --prog-only)
                file=0;
                text=0
            ;;
            *)
                break
            ;;
        esac;
        shift;
        let args++;
    done;
    local ag_options="-lS $1";
    local find_options=". -iname $1";
    local which_options="$1";
    if (( fuzzy )); then
        ag_options="-lS $1";
        find_options=". -iname *$1*";
        which_options="$1";
    fi;
    { 
        (( text )) && { 
            ag --nocolor $ag_options;
            echo
        };
        (( file )) && { 
            find $find_options;
            echo
        };
        (( prog )) && { 
            which $which_options;
            echo
        }
    };
    return $args
}
wizard_install () 
{ 
    [[ -n $1 ]] || "${FUNCNAME[0]}" --help;
    local __ret __shifts=0;
    local __usage="
  apt
  docker
  git
  java
  lua
  shellcheck
  vnc";
    local __name="wizard install";
    while [[ -n $1 ]]; do
        case $1 in 
            "a" | "ap" | "apt")
                wizard_install_apt "${@:2}"
            ;;
            "d" | "do" | "doc" | "dock" | "docke" | "docker")
                wizard_install_docker "${@:2}"
            ;;
            "g" | "gi" | "git")
                wizard_install_git "${@:2}"
            ;;
            "j" | "ja" | "jav" | "java")
                wizard_install_java "${@:2}"
            ;;
            "l" | "lu" | "lua")
                wizard_install_lua "${@:2}"
            ;;
            "s" | "sh" | "she" | "shel" | "shell" | "shellc" | "shellch" | "shellche" | "shellchec" | "shellcheck")
                wizard_install_shellcheck "${@:2}"
            ;;
            "v" | "vn" | "vnc")
                wizard_install_vnc "${@:2}"
            ;;
            *)
                if [[ -n $usage ]]; then
                    echo "$usage";
                else
                    echo;
                    echo "$__name";
                    echo "$__usage";
                    echo;
                fi
            ;;
        esac;
        __ret=$?;
        shift;
        shift $__ret;
        let __shifts+=$__ret+1;
    done;
    return $__shifts
}
wizard_install_apt () 
{ 
    common::required_help "$1" "

  install distribution packages
  ";
    case $PLATFORM in 
        Linux)
            if which apt > /dev/null; then
                common::sudo apt install "$@";
            fi
        ;;
        *)
            common::error "Unsupported platform \"$PLATFORM\""
        ;;
    esac;
    return $#
}
wizard_install_docker () 
{ 
    common::optional_help "$1" "

  install the dependencies and kernel headers for docker-ce
  ";
    common::do curl -fsSL 'https://download.docker.com/linux/ubuntu/gpg' | sudo apt-key add -;
    common::sudo add-apt-repository "\"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\"";
    common::sudo apt-get update;
    common::do apt-cache policy docker-ce;
    common::sudo apt-get install -y docker-ce
}
wizard_install_git () 
{ 
    common::optional_help "$1" "

  install the newest git version
  ";
    common::sudo add-apt-repository ppa:git-core/ppa -y;
    common::sudo apt-get update;
    common::sudo apt-get install git -y
}
wizard_install_java () 
{ 
    common::optional_help "$1" "

  install the Oracle JDK
  ";
    common::sudo add-apt-repository ppa:webupd8team/java;
    common::sudo apt update;
    common::sudo apt install oracle-java8-installer
}
wizard_install_lua () 
{ 
    common::optional_help "$1" "

  compile and install lua 5.3.3
  ";
    if [[ $(lua -v) =~ "Lua 5.3.3" ]]; then
        echo "Lua already installed";
        return;
    fi;
    echo "installing lua";
    common::do cd /tmp/;
    common::do wget 'https://www.lua.org/ftp/lua-5.3.3.tar.gz';
    common::do tar zxvf lua-5.3.3.tar.gz;
    common::do cd lua-5.3.3;
    common::do make linux;
    common::sudo make install;
    common::do cd -;
    echo "done"
}
wizard_install_shellcheck () 
{ 
    common::optional_help "$1" "

  download and install the latest shellcheck
  ";
    common::do cd /tmp/;
    common::do wget 'http://ftp.us.debian.org/debian/pool/main/s/shellcheck/shellcheck_0.4.6-1_i386.deb';
    common::sudo dpkg -i shellcheck_*.deb || true;
    common::sudo apt-get install -f;
    common::do cd -
}
wizard_install_vnc () 
{ 
    common::optional_help "$1" "

  install xfce4 and start a VNC server. for droplets
  ";
    common::sudo apt update;
    common::sudo apt install xfce4 xfce4-goodies tightvncserver;
    common::sudo vncserver;
    common::sudo vncserver -kill :1;
    cat > "$HOME"/.vnc/xstartup  <<EOF
#!/bin/bash
xrdb \$HOME/.Xresources
startxfce4 &
EOF

    common::do chmod +x "$HOME"/.vnc/xstartup
}
wizard_make () 
{ 
    [[ -n $1 ]] || "${FUNCNAME[0]}" --help;
    local __ret __shifts=0;
    local __usage="
  file ...
  project ...
  session";
    local __name="wizard make";
    while [[ -n $1 ]]; do
        case $1 in 
            "f" | "fi" | "fil" | "file")
                wizard_make_file "${@:2}"
            ;;
            "p" | "pr" | "pro" | "proj" | "proje" | "projec" | "project")
                wizard_make_project "${@:2}"
            ;;
            "s" | "se" | "ses" | "sess" | "sessi" | "sessio" | "session")
                wizard_make_session "${@:2}"
            ;;
            *)
                if [[ -n $usage ]]; then
                    echo "$usage";
                else
                    echo;
                    echo "$__name";
                    echo "$__usage";
                    echo;
                fi
            ;;
        esac;
        __ret=$?;
        shift;
        shift $__ret;
        let __shifts+=$__ret+1;
    done;
    return $__shifts
}
wizard_make_file () 
{ 
    [[ -n $1 ]] || "${FUNCNAME[0]}" --help;
    local __ret __shifts=0;
    local __usage="
  c
  cpp
  java
  python
  shell";
    local __name="wizard make file";
    [[ -n $2 ]] || common::error "
$__name [language] [file name]
$__usage
";
    while [[ -n $1 ]]; do
        case $1 in 
            "c")
                wizard_make_file_c "${@:2}"
            ;;
            "c" | "cp" | "cpp")
                wizard_make_file_cpp "${@:2}"
            ;;
            "j" | "ja" | "jav" | "java")
                wizard_make_file_java "${@:2}"
            ;;
            "p" | "py" | "pyt" | "pyth" | "pytho" | "python")
                wizard_make_file_python "${@:2}"
            ;;
            "s" | "sh" | "she" | "shel" | "shell")
                wizard_make_file_shell "${@:2}"
            ;;
            *)
                if [[ -n $usage ]]; then
                    echo "$usage";
                else
                    echo;
                    echo "$__name";
                    echo "$__usage";
                    echo;
                fi
            ;;
        esac;
        __ret=$?;
        shift;
        shift $__ret;
        let __shifts+=$__ret+1;
    done;
    return $__shifts
}
wizard_make_file_c () 
{ 
    cat > "$1".c  <<EOF
#include "$name.h"

int main(int argc, char *argv[]) {

  return 0;
}
EOF

}
wizard_make_file_cpp () 
{ 
    cat > "$1".cpp  <<EOF
#include "$name.h"

int main(int argc, char const *argv[]) {

  return 0;
}
EOF

}
wizard_make_file_java () 
{ 
    cat > "$1".java  <<EOF
public class $1 {

  public static void main(String[] argv) {

    System.out.println("Hello world");
  }
}
EOF

}
wizard_make_file_python () 
{ 
    cat > "$1.py"  <<EOF
#!/usr/bin/python

import sys

def main(args):
  ''' list of strings -> none
  '''
  pass

if __name__ == '__main__':
  main(sys.argv)
EOF

}
wizard_make_file_shell () 
{ 
    cat > "$1".sh  <<EOF
#!/bin/bash

main() {

  exit 0
}

main "\$@"
EOF

}
wizard_make_project () 
{ 
    [[ -n $1 ]] || "${FUNCNAME[0]}" --help;
    local __ret __shifts=0;
    local __usage="
  c
  cpp
  java
  python";
    local __name="wizard make project";
    [[ -n $2 ]] || common::error "
$__name [language] [project name]
$__usage
";
    while [[ -n $1 ]]; do
        case $1 in 
            "c")
                wizard_make_project_c "${@:2}"
            ;;
            "c" | "cp" | "cpp")
                wizard_make_project_cpp "${@:2}"
            ;;
            "j" | "ja" | "jav" | "java")
                wizard_make_project_java "${@:2}"
            ;;
            "p" | "py" | "pyt" | "pyth" | "pytho" | "python")
                wizard_make_project_python "${@:2}"
            ;;
            *)
                if [[ -n $usage ]]; then
                    echo "$usage";
                else
                    echo;
                    echo "$__name";
                    echo "$__usage";
                    echo;
                fi
            ;;
        esac;
        __ret=$?;
        shift;
        shift $__ret;
        let __shifts+=$__ret+1;
    done;
    return $__shifts
}
wizard_make_project_c () 
{ 
    common::do mkdir "$1";
    common::do cd "$1";
    wizard_make_file c "$1";
    touch "$1".h;
    mmake -l c -o "$1"
}
wizard_make_project_cpp () 
{ 
    common::do mkdir "$1";
    common::do cd "$1";
    wizard_make_file cpp "$1";
    touch "$1".h;
    mmake -l cpp -o "$1"
}
wizard_make_project_java () 
{ 
    common::do mkdir "$1";
    common::do cd "$1";
    wizard_make_file java "$1";
    mmake -l java -o "$1"
}
wizard_make_project_python () 
{ 
    common::do mkdir "$1";
    common::do cd "$1";
    wizard_make_file python "$1";
    return 1
}
wizard_make_session () 
{ 
    common::optional_help "$1" "[name]

  create a new tmux session and move to it
    ";
    name=${1:-$RANDOM};
    tmux new -d -s "$name";
    tmux switch-client -t "$name";
    return 1
}
wizard_open () 
{ 
    common::required_help "$1" "

  open a file based on it's type and available programs
  ";
    for target in "$@";
    do
        if [[ $(file -b "$target") =~ 'ASCII text' ]]; then
            vim "$target";
        else
            if which xdg-open > /dev/null; then
                if which xiwit > /dev/null; then
                    xiwit xdg-open "$target";
                else
                    xdg-open "$target";
                fi;
            fi;
        fi;
    done;
    return $#
}
wizard_show () 
{ 
    [[ -n $1 ]] || "${FUNCNAME[0]}" --help;
    local __ret __shifts=0;
    local __usage="
  disk
  history
  largest-packages
  progress
  weather";
    local __name="wizard show";
    while [[ -n $1 ]]; do
        case $1 in 
            "d" | "di" | "dis" | "disk")
                wizard_show_disk "${@:2}"
            ;;
            "h" | "hi" | "his" | "hist" | "histo" | "histor" | "history")
                wizard_show_history "${@:2}"
            ;;
            "l" | "la" | "lar" | "larg" | "large" | "larges" | "largest" | "largest-" | "largest-p" | "largest-pa" | "largest-pac" | "largest-pack" | "largest-packa" | "largest-packag" | "largest-package" | "largest-packages")
                wizard_show_largest-packages "${@:2}"
            ;;
            "p" | "pr" | "pro" | "prog" | "progr" | "progre" | "progres" | "progress")
                wizard_show_progress "${@:2}"
            ;;
            "w" | "we" | "wea" | "weat" | "weath" | "weathe" | "weather")
                wizard_show_weather "${@:2}"
            ;;
            *)
                if [[ -n $usage ]]; then
                    echo "$usage";
                else
                    echo;
                    echo "$__name";
                    echo "$__usage";
                    echo;
                fi
            ;;
        esac;
        __ret=$?;
        shift;
        shift $__ret;
        let __shifts+=$__ret+1;
    done;
    return $__shifts
}
wizard_show_disk () 
{ 
    common::optional_help "$1" "

  show disk and partition usage
  ";
    df -h
}
wizard_show_history () 
{ 
    common::optional_help "$1" "(amount) (range)

  show the <amount> of the most frequently run commands
  ";
    local amount=${1:-25};
    local range=${2:-1};
    fish -c history | cut -f "$range" -d' ' | sort | uniq -c | sort -nr | head -n "$amount";
    [[ -n $1 && -n $2 ]] && return 2;
    [[ -n $1 ]] && return 1;
    return 0
}
wizard_show_largest-packages () 
{ 
    common::optional_help "$1" "

  list all packages installed, sorted by size
  ";
    dpkg-query -Wf '${Installed-Size}\t${Package}\n' | sort -n
}
wizard_show_progress () 
{ 
    common::required_help "$1" "

  run a command repeatedly, clear the screen between runs
  ";
    while :; do
        eval "$@";
        sleep 1;
        clear;
    done;
    return $#
}
wizard_show_weather () 
{ 
    curl http://wttr.in/~"${1:-Seattle}";
    return $#
}
wizard_start () 
{ 
    [[ -n $1 ]] || "${FUNCNAME[0]}" --help;
    local __ret __shifts=0;
    local __usage="
  http-server
  sshd";
    local __name="wizard start";
    while [[ -n $1 ]]; do
        case $1 in 
            "h" | "ht" | "htt" | "http" | "http-" | "http-s" | "http-se" | "http-ser" | "http-serv" | "http-serve" | "http-server")
                wizard_start_http-server "${@:2}"
            ;;
            "s" | "ss" | "ssh" | "sshd")
                wizard_start_sshd "${@:2}"
            ;;
            *)
                if [[ -n $usage ]]; then
                    echo "$usage";
                else
                    echo;
                    echo "$__name";
                    echo "$__usage";
                    echo;
                fi
            ;;
        esac;
        __ret=$?;
        shift;
        shift $__ret;
        let __shifts+=$__ret+1;
    done;
    return $__shifts
}
wizard_start_http-server () 
{ 
    python -m SimpleHTTPServer;
    return $#
}
wizard_start_sshd () 
{ 
    common::optional_help "$1" "

  start sshd on Chrome OS
  ";
    common::sudo mkdir -p -m0755 /var/run/sshd;
    common::sudo /usr/sbin/sshd
}
wizard_update () 
{ 
    [[ -n $1 ]] || "${FUNCNAME[0]}" --help;
    local __ret __shifts=0;
    local __usage="
  apt
  pip
  platform";
    local __name="wizard update";
    while [[ -n $1 ]]; do
        case $1 in 
            "a" | "ap" | "apt")
                wizard_update_apt "${@:2}"
            ;;
            "p" | "pi" | "pip")
                wizard_update_pip "${@:2}"
            ;;
            "p" | "pl" | "pla" | "plat" | "platf" | "platfo" | "platfor" | "platform")
                wizard_update_platform "${@:2}"
            ;;
            *)
                if [[ -n $usage ]]; then
                    echo "$usage";
                else
                    echo;
                    echo "$__name";
                    echo "$__usage";
                    echo;
                fi
            ;;
        esac;
        __ret=$?;
        shift;
        shift $__ret;
        let __shifts+=$__ret+1;
    done;
    return $__shifts
}
wizard_update_apt () 
{ 
    common::optional_help "$1" "

  update all apt packages
  ";
    common::sudo apt update;
    common::sudo apt upgrade -y;
    common::sudo apt-get autoremove
}
wizard_update_pip () 
{ 
    common::optional_help "$1" "

  update all python packages installed by pip
  ";
    sudo -H pip freeze --local | grep -v '^\-e' | cut -d = -f 1 | xargs -n1 sudo -H pip install -U
}
wizard_update_platform () 
{ 
    case $PLATFORM in 
        Linux)
            wizard update apt;
            wizard update pip
        ;;
    esac
}
